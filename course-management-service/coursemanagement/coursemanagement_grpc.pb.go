// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: coursemanagement.proto

package course_management_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CourseManagementServiceClient is the client API for CourseManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CourseManagementServiceClient interface {
	GetAllSubject(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SubjectList, error)
	GetSubject(ctx context.Context, in *SubjectId, opts ...grpc.CallOption) (*SubjectItem, error)
	AddNewSubject(ctx context.Context, in *SubjectItem, opts ...grpc.CallOption) (*SubjectItem, error)
	UpdateSubjectDetail(ctx context.Context, in *SubjectItem, opts ...grpc.CallOption) (*SubjectItem, error)
	DeleteSubject(ctx context.Context, in *SubjectId, opts ...grpc.CallOption) (*Empty, error)
}

type courseManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCourseManagementServiceClient(cc grpc.ClientConnInterface) CourseManagementServiceClient {
	return &courseManagementServiceClient{cc}
}

func (c *courseManagementServiceClient) GetAllSubject(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SubjectList, error) {
	out := new(SubjectList)
	err := c.cc.Invoke(ctx, "/CourseManagementService/GetAllSubject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseManagementServiceClient) GetSubject(ctx context.Context, in *SubjectId, opts ...grpc.CallOption) (*SubjectItem, error) {
	out := new(SubjectItem)
	err := c.cc.Invoke(ctx, "/CourseManagementService/GetSubject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseManagementServiceClient) AddNewSubject(ctx context.Context, in *SubjectItem, opts ...grpc.CallOption) (*SubjectItem, error) {
	out := new(SubjectItem)
	err := c.cc.Invoke(ctx, "/CourseManagementService/AddNewSubject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseManagementServiceClient) UpdateSubjectDetail(ctx context.Context, in *SubjectItem, opts ...grpc.CallOption) (*SubjectItem, error) {
	out := new(SubjectItem)
	err := c.cc.Invoke(ctx, "/CourseManagementService/UpdateSubjectDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseManagementServiceClient) DeleteSubject(ctx context.Context, in *SubjectId, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/CourseManagementService/DeleteSubject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CourseManagementServiceServer is the server API for CourseManagementService service.
// All implementations must embed UnimplementedCourseManagementServiceServer
// for forward compatibility
type CourseManagementServiceServer interface {
	GetAllSubject(context.Context, *Empty) (*SubjectList, error)
	GetSubject(context.Context, *SubjectId) (*SubjectItem, error)
	AddNewSubject(context.Context, *SubjectItem) (*SubjectItem, error)
	UpdateSubjectDetail(context.Context, *SubjectItem) (*SubjectItem, error)
	DeleteSubject(context.Context, *SubjectId) (*Empty, error)
	mustEmbedUnimplementedCourseManagementServiceServer()
}

// UnimplementedCourseManagementServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCourseManagementServiceServer struct {
}

func (UnimplementedCourseManagementServiceServer) GetAllSubject(context.Context, *Empty) (*SubjectList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSubject not implemented")
}
func (UnimplementedCourseManagementServiceServer) GetSubject(context.Context, *SubjectId) (*SubjectItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubject not implemented")
}
func (UnimplementedCourseManagementServiceServer) AddNewSubject(context.Context, *SubjectItem) (*SubjectItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNewSubject not implemented")
}
func (UnimplementedCourseManagementServiceServer) UpdateSubjectDetail(context.Context, *SubjectItem) (*SubjectItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubjectDetail not implemented")
}
func (UnimplementedCourseManagementServiceServer) DeleteSubject(context.Context, *SubjectId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubject not implemented")
}
func (UnimplementedCourseManagementServiceServer) mustEmbedUnimplementedCourseManagementServiceServer() {
}

// UnsafeCourseManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CourseManagementServiceServer will
// result in compilation errors.
type UnsafeCourseManagementServiceServer interface {
	mustEmbedUnimplementedCourseManagementServiceServer()
}

func RegisterCourseManagementServiceServer(s grpc.ServiceRegistrar, srv CourseManagementServiceServer) {
	s.RegisterService(&CourseManagementService_ServiceDesc, srv)
}

func _CourseManagementService_GetAllSubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseManagementServiceServer).GetAllSubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CourseManagementService/GetAllSubject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseManagementServiceServer).GetAllSubject(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseManagementService_GetSubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubjectId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseManagementServiceServer).GetSubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CourseManagementService/GetSubject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseManagementServiceServer).GetSubject(ctx, req.(*SubjectId))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseManagementService_AddNewSubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubjectItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseManagementServiceServer).AddNewSubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CourseManagementService/AddNewSubject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseManagementServiceServer).AddNewSubject(ctx, req.(*SubjectItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseManagementService_UpdateSubjectDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubjectItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseManagementServiceServer).UpdateSubjectDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CourseManagementService/UpdateSubjectDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseManagementServiceServer).UpdateSubjectDetail(ctx, req.(*SubjectItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseManagementService_DeleteSubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubjectId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseManagementServiceServer).DeleteSubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CourseManagementService/DeleteSubject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseManagementServiceServer).DeleteSubject(ctx, req.(*SubjectId))
	}
	return interceptor(ctx, in, info, handler)
}

// CourseManagementService_ServiceDesc is the grpc.ServiceDesc for CourseManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CourseManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CourseManagementService",
	HandlerType: (*CourseManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllSubject",
			Handler:    _CourseManagementService_GetAllSubject_Handler,
		},
		{
			MethodName: "GetSubject",
			Handler:    _CourseManagementService_GetSubject_Handler,
		},
		{
			MethodName: "AddNewSubject",
			Handler:    _CourseManagementService_AddNewSubject_Handler,
		},
		{
			MethodName: "UpdateSubjectDetail",
			Handler:    _CourseManagementService_UpdateSubjectDetail_Handler,
		},
		{
			MethodName: "DeleteSubject",
			Handler:    _CourseManagementService_DeleteSubject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coursemanagement.proto",
}
